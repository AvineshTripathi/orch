// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.24.3
// source: proto-provisioner/service.proto

package proto_provisioner

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ProvisionerService_GetProvisionerStatus_FullMethodName = "/provisioner.ProvisionerService/GetProvisionerStatus"
	ProvisionerService_CreateEnvironment_FullMethodName    = "/provisioner.ProvisionerService/CreateEnvironment"
)

// ProvisionerServiceClient is the client API for ProvisionerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProvisionerServiceClient interface {
	GetProvisionerStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	CreateEnvironment(ctx context.Context, in *EnvCreateRequest, opts ...grpc.CallOption) (*EnvCreateResponse, error)
}

type provisionerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProvisionerServiceClient(cc grpc.ClientConnInterface) ProvisionerServiceClient {
	return &provisionerServiceClient{cc}
}

func (c *provisionerServiceClient) GetProvisionerStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, ProvisionerService_GetProvisionerStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionerServiceClient) CreateEnvironment(ctx context.Context, in *EnvCreateRequest, opts ...grpc.CallOption) (*EnvCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnvCreateResponse)
	err := c.cc.Invoke(ctx, ProvisionerService_CreateEnvironment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProvisionerServiceServer is the server API for ProvisionerService service.
// All implementations must embed UnimplementedProvisionerServiceServer
// for forward compatibility
type ProvisionerServiceServer interface {
	GetProvisionerStatus(context.Context, *StatusRequest) (*StatusResponse, error)
	CreateEnvironment(context.Context, *EnvCreateRequest) (*EnvCreateResponse, error)
	mustEmbedUnimplementedProvisionerServiceServer()
}

// UnimplementedProvisionerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProvisionerServiceServer struct {
}

func (UnimplementedProvisionerServiceServer) GetProvisionerStatus(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProvisionerStatus not implemented")
}
func (UnimplementedProvisionerServiceServer) CreateEnvironment(context.Context, *EnvCreateRequest) (*EnvCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnvironment not implemented")
}
func (UnimplementedProvisionerServiceServer) mustEmbedUnimplementedProvisionerServiceServer() {}

// UnsafeProvisionerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProvisionerServiceServer will
// result in compilation errors.
type UnsafeProvisionerServiceServer interface {
	mustEmbedUnimplementedProvisionerServiceServer()
}

func RegisterProvisionerServiceServer(s grpc.ServiceRegistrar, srv ProvisionerServiceServer) {
	s.RegisterService(&ProvisionerService_ServiceDesc, srv)
}

func _ProvisionerService_GetProvisionerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionerServiceServer).GetProvisionerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProvisionerService_GetProvisionerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionerServiceServer).GetProvisionerStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProvisionerService_CreateEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionerServiceServer).CreateEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProvisionerService_CreateEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionerServiceServer).CreateEnvironment(ctx, req.(*EnvCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProvisionerService_ServiceDesc is the grpc.ServiceDesc for ProvisionerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProvisionerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "provisioner.ProvisionerService",
	HandlerType: (*ProvisionerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProvisionerStatus",
			Handler:    _ProvisionerService_GetProvisionerStatus_Handler,
		},
		{
			MethodName: "CreateEnvironment",
			Handler:    _ProvisionerService_CreateEnvironment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto-provisioner/service.proto",
}
